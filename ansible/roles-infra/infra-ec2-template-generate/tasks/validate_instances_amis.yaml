  - name: what instances am I dealing with?
    debug:
      verbosity: 2
      var: instances

  - name: prep facts
    set_fact:
      instances_DoD: "{{ [] }}"  # DoD
  
  - name: fail if I can't map an image to aws_ami_region_mapping
    loop: "{{ instances }}"
    when:
    - item.image is defined
    - aws_ami_region_mapping[aws_region][item.image] is not defined
    fail:
      msg: >- 
        instance.image "{{ item.image }}" is not defined in aws_ami_region_mapping.

  - name: create instances_DoD from instances LoD
    loop: "{{ instances }}"
    loop_control:
      extended: yes
    set_fact: 
      instances_DoD: >-
        {{ 
          instances_DoD| combine(
            { ansible_loop.index0: instances[ansible_loop.index0]  }
          )
        }}

  - name: test if bump RHEL<VERSION> images to GOLD, if available in aws_ami_region_mapping
    loop: "{{ instances_DoD|dict2items }}"
    when: 
      - item.value['image'] is defined
      - item.value['image'] is regex("^RHEL.*$")
      - item.value['image'] is not regex("^.*GOLD$")
      - item.value['image'] |regex_replace("^(.*)$", "\\1GOLD")] in aws_ami_region_mapping[aws_region]
    ec2_ami_facts:
      # profile: "{{ profile }}"
      region: "{{ aws_region }}"
      image_ids: >-
        {{ aws_ami_region_mapping[aws_region][
            item.value['image']|regex_replace("^(.*)$", "\1GOLD")
          ] }}
    register: ami_presence

  - name: debug ami_presence
    debug:
      verbosity: 2
      var: ami_presence.results

  - name: rename successful bumps from RHEL<VERSION> to RHEL<VERSION>GOLD in instances_DoD
    # items that returned images array not empty
    loop: "{{ ami_presence.results|json_query(' [? not_null(invocation) && not_null(images)].item.key' ) }}"
    set_fact:
      instances_DoD: >-
        {{ instances_DoD| combine(
          { item:
            { "image": instances_DoD[item]['image']|regex_replace("^(.*)$", "\1GOLD")}
            }, 
          recursive=True
        )}}

  - name: test all images.  Some have <ANYTHYING>, RHEL<VERSION>, RHEL<VERSION>GOLD
    ignore_errors: True
    loop: "{{ instances_DoD|dict2items }}"
    when: 
      - item.value['image'] is defined
      - aws_ami_region_mapping[aws_region][item.value['image']] is defined
    ec2_ami_facts:
      # profile: "{{ profile }}"
      region: "{{ aws_region }}"
      image_ids: "{{ aws_ami_region_mapping[aws_region][item.value['image']] }}"
    register: ami_presence

  - name: if there was a failure of a GOLD and there's no RHEL<VERSION>, bail out
    loop: "{{ ami_presence.results|json_query(' [? not_null(invocation) && ! not_null(images)].item.key ') }}"
    vars:
      my_image_wihtout_gold: "{{ instances_DoD[item].image|replace('GOLD','') }}"
    assert:
      that:
        - instances_DoD[item].image is regex("^RHEL.*GOLD$")
        # the gold has non-gold
        - aws_ami_region_mapping[aws_region][my_image_wihtout_gold] is defined 
      fail_msg: >-
        Image {{ my_image_wihtout_gold }} not available.

  - name: if there was a failure of a GOLD, try without GOLD
    # get indexes of instances that could be queried for, but could not be found.
    # "! not_null(images)" seems to be the only way to identify an empty list in jinja2
    loop: "{{ ami_presence.results|json_query(' [? not_null(invocation) && ! not_null(images)].item.key ') }}"
    when:
    - instances_DoD[item].image is regex("^.*GOLD$")
    ec2_ami_facts:
      # profile: "{{ profile }}"
      region: "{{ aws_region }}"
      image_ids: "{{ aws_ami_region_mapping[aws_region][instances[item].image|replace('GOLD', '')] }}"
    register: ami_presence_no_GOLD

  # fail if one of the no-longer-gold instances cannot be accessed (syntax error in name?)

  - name: for those that failed RHEL<VERSION>GOLD and RHEL<VERSION> are found, remove GOLD from image
    loop: "{{ ami_presence_no_GOLD.results|json_query(' [? not_null(invocation) && not_null(images)].item ') }}"
    set_fact:
      instances_DoD: >-
        {{ instances_DoD| combine(
          { item:
            { "image": instances_DoD[item]['image']|replace("GOLD", "")}
            }, 
          recursive=True
        )}}

  - name: rebuild instances LoD
    set_fact:
      instances: "{{ instances_DoD.values() | list }}"

  - name: debug instances
    debug:
      verbosity: 2
      var: instances
